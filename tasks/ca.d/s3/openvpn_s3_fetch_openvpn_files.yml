---
- name: "openvpn | Fetch instance takey from CA (S3)"
  amazon.aws.s3_object:
    aws_access_key: "{{
      vars['openvpn_ca_storage_source']['aws_access_key'] | default(omit) }}"
    aws_secret_key: "{{
      vars['openvpn_ca_storage_source']['aws_secret_key'] | default(omit) }}"
    bucket: "{{ vars['openvpn_ca_storage_source']['bucket'] | default(omit) }}"
    dest: "{{ vars['openvpn_local_fetch_dir'] ~ '/' ~
      vars['openvpn_instance_name'] ~ '/' ~ item['tls_auth'] }}"
    ignore_nonexistent_bucket: "true"
    rgw: "{{ vars['openvpn_ca_storage_source']['rgw'] | default(omit) }}"
    endpoint_url: "{{ vars['openvpn_ca_storage_source']['endpoint_url'] |
      default(omit) }}"
    validate_certs: "{{
      vars['openvpn_ca_storage_source']['validate_certs'] | default(omit) }}"
    region: "{{ vars['openvpn_ca_storage_source']['region'] | default(omit) }}"
    profile: "{{
      vars['openvpn_ca_storage_source']['profile'] | default(omit) }}"
    mode: "get"
    object: "{{ vars['openvpn_ca_storage_source']['object_prefix'] ~ '/' ~
      vars['openvpn_ca_storage_source']['openvpn_path'] ~ '/' ~
      item['tls_auth'] }}"
  loop: "{{ hostvars[inventory_hostname]['openvpn'] |
    community.general.json_query(\"[].openvpn_settings[?name=='\" ~
    vars['outer_item'].name ~ \"']\") | flatten(levels=1) }}"
  loop_control:
    label: "{{ 'openvpn-' + item['type'] + ': ' ~ item['name'] }}"
  when:
    - "item['tls_auth'] is defined"
    - "item['tls_auth'] not in ['', [], None]"
- name: "openvpn | Fetch CRL from CA (S3)"
  amazon.aws.s3_object:
    aws_access_key: "{{
      vars['openvpn_ca_storage_source']['aws_access_key'] | default(omit) }}"
    aws_secret_key: "{{
      vars['openvpn_ca_storage_source']['aws_secret_key'] | default(omit) }}"
    bucket: "{{ vars['openvpn_ca_storage_source']['bucket'] | default(omit) }}"
    dest: "{{ vars['openvpn_local_fetch_dir'] ~ '/' ~
      vars['openvpn_instance_name'] ~ '/' ~ item['crl_verify'] }}"
    ignore_nonexistent_bucket: "true"
    rgw: "{{ vars['openvpn_ca_storage_source']['rgw'] | default(omit) }}"
    endpoint_url: "{{ vars['openvpn_ca_storage_source']['endpoint_url'] |
      default(omit) }}"
    validate_certs: "{{
      vars['openvpn_ca_storage_source']['validate_certs'] | default(omit) }}"
    region: "{{ vars['openvpn_ca_storage_source']['region'] | default(omit) }}"
    profile: "{{
      vars['openvpn_ca_storage_source']['profile'] | default(omit) }}"
    mode: "get"
    object: "{{ vars['openvpn_ca_storage_source']['object_prefix'] ~ '/' ~
      vars['openvpn_ca_storage_source']['crl_path'] ~ '/' ~ item['crl_verify'] }}"
  loop: "{{ hostvars[inventory_hostname]['openvpn'] |
    community.general.json_query(\"[].openvpn_settings[?name=='\" ~
    vars['outer_item'].name ~ \"']\") | flatten(levels=1) }}"
  loop_control:
    label: "{{ 'openvpn-' + item['type'] + ': ' ~ item['name'] }}"
  when:
    - "item['type'] == 'server'"
    - "item['crl_verify'] is defined"
    - "item['crl_verify'] not in ['', [], None]"
- name: "openvpn | Fetch DHPARAM from CA (S3)"
  amazon.aws.s3_object:
    aws_access_key: "{{
      vars['openvpn_ca_storage_source']['aws_access_key'] | default(omit) }}"
    aws_secret_key: "{{
      vars['openvpn_ca_storage_source']['aws_secret_key'] | default(omit) }}"
    bucket: "{{ vars['openvpn_ca_storage_source']['bucket'] | default(omit) }}"
    dest: "{{ vars['openvpn_local_fetch_dir'] ~ '/' ~
      vars['openvpn_instance_name'] ~ '/' ~ item['dh'] }}"
    ignore_nonexistent_bucket: "true"
    rgw: "{{ vars['openvpn_ca_storage_source']['rgw'] | default(omit) }}"
    endpoint_url: "{{ vars['openvpn_ca_storage_source']['endpoint_url'] |
      default(omit) }}"
    validate_certs: "{{
      vars['openvpn_ca_storage_source']['validate_certs'] | default(omit) }}"
    region: "{{ vars['openvpn_ca_storage_source']['region'] | default(omit) }}"
    profile: "{{
      vars['openvpn_ca_storage_source']['profile'] | default(omit) }}"
    mode: "get"
    object: "{{ vars['openvpn_ca_storage_source']['object_prefix'] ~ '/' ~
      vars['openvpn_ca_storage_source']['openvpn_path'] ~ '/' ~ item['dh'] }}"
  loop: "{{ hostvars[inventory_hostname]['openvpn'] |
    community.general.json_query(\"[].openvpn_settings[?name=='\" ~
    vars['outer_item'].name ~ \"']\") | flatten(levels=1) }}"
  loop_control:
    label: "{{ 'openvpn-' + item['type'] + ': ' ~ item['name'] }}"
  when:
    - "item['type'] == 'server'"
    - "item['dh'] is defined"
    - "item['dh'] not in ['', [], None]"
